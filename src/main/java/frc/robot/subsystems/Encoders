package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;

import edu.wpi.first.wpilibj.CounterBase;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;

public class Encoders extends SubsystemBase {
  public static TalonSRX rightEncoder;
  public static TalonSRX leftEncoder;


  

  PlotThread m_plotthread;

    public Encoders() {
      
      rightEncoder = new TalonSRX(0);		
      leftEncoder = new TalonSRX(4);
      
}


    @Override
    public void periodic() {
      
      rightEncoder.configFactoryDefault();

     
      leftEncoder.follow(rightEncoder);

      rightEncoder.setStatusFramePeriod(StatusFrameEnhanced.Status_2_Feedback, 0, 10);
      rightEncoder.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative);

      leftEncoder.setStatusFramePeriod(StatusFrameEnhanced.Status_2_Feedback, 0, 10);
      leftEncoder.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative);
  
      /* Fire the plotter */
      m_plotthread = new PlotThread(this);
      new Thread(m_plotthread).start();
      

    
  }

  public void encoderDrive(double encoderpower){

    Encoders.leftEncoder.set(ControlMode.PercentOutput, encoderpower);
		
		System.out.printf("Output: %.4f\n", Encoders.leftEncoder.getMotorOutputPercent());
    


			Encoders.rightEncoder.set(ControlMode.PercentOutput, encoderpower);
    	
		System.out.printf("Output: %.4f\n", Encoders.rightEncoder.getMotorOutputPercent());

  }

 }

    class PlotThread implements Runnable {
      Encoders encoders;
    
      public PlotThread(Encoders encoders) {
        this.encoders = encoders;
      }
    
      public void run() {
     
        while (true) {
          /* Yield for a Ms or so - this is not meant to be accurate */
          try {
            Thread.sleep(1);
          } catch (Exception e) {
            /* Do Nothing */
          }
    
          /* Grab the latest signal update from our 5ms frame update */
          double velocity = Encoders.rightEncoder.getSelectedSensorVelocity(0);
          SmartDashboard.putNumber("vel", velocity);
    
          double velocity2 = Encoders.leftEncoder.getSelectedSensorVelocity(0);
          SmartDashboard.putNumber("vel", velocity2);
        }
      }
}