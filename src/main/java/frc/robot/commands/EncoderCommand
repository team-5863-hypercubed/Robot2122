// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.DriveTrain;
import edu.wpi.first.wpilibj.CounterBase;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import java.util.function.DoubleSupplier;

public class EncoderCommand extends CommandBase {
  
  private final DriveTrain m_driveTrain;
    
  private DoubleSupplier speed;
  private DoubleSupplier rotation;

  
  public static Encoder m_leftencoder = new Encoder(1, 2, true, CounterBase.EncodingType.k4X);

    double distance = m_leftencoder.getDistance();
    int count = m_leftencoder.get();
    int rawCount = m_leftencoder.getRaw();
    boolean direction = m_leftencoder.getDirection();
    boolean stopped = m_leftencoder.getStopped();


  /** Creates a new EncoderCommand. */
  public EncoderCommand(DriveTrain m_driveTrain, DoubleSupplier speed, DoubleSupplier rotation) { 


      this.m_driveTrain = m_driveTrain;
      addRequirements(m_driveTrain);

      this.speed = speed;
      this.rotation = rotation;

       /*
        * defines the number of samples to average when determining the rate.
        * On a quadrature encoder, values range from 1-255;*/

        m_leftencoder.setMaxPeriod(15);

        m_leftencoder.setSamplesToAverage(5);

    //                                                                Radius
        m_leftencoder.setDistancePerPulse(1.0 / 360.0 * 2.0 * Math.PI * 3);
    
        /*
         * Defines the lowest rate at which the encoder will
         * not be considered stopped, for the purposes of
         * the GetStopped() method. Units are in distance / second,
         * where distance refers to the units of distance
         * in inches.
         */
        m_leftencoder.setMinRate(1.0);

    // Use addRequirements() here to declare subsystem dependencies.
  }


  public void encoderReset(){
    m_leftencoder.reset();
}

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {

    SmartDashboard.putNumber("Encoder Distance", m_leftencoder.getDistance());
    SmartDashboard.putNumber("Encoder Rate", m_leftencoder.getRate());
    
  }

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {

    if(rawCount == 5){

      m_driveTrain.arcadeDrive(0, 0);

    }
  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {}

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return false;
  }
}
